{
  "tasks": [
    {
      "id": "f5386303-0bda-420c-9959-ed002324c7cc",
      "name": "P2.1: Branch Creation & Bootstrap Migration Implementation",
      "description": "Create a new Git branch for Phase 2 (e.g., `feature/platform-data-ownership-fields`). Generate and implement the initial TypeORM bootstrap migration (e.g., `0000...-EnsurePlatformPrerequisites.ts`). This migration will use `CREATE TABLE IF NOT EXISTS` to create minimal placeholder versions of essential platform tables: `public.applications` (id uuid PK, name text NOT NULL DEFAULT 'Default Application'), `public.organizations` (id uuid PK, name text NOT NULL DEFAULT 'Default Organization'), `public.user_profiles` (id uuid PK, user_auth_id uuid UNIQUE NOT NULL, email text - where `user_auth_id` links to `auth.users.id`), and `public.user_sessions` (id uuid PK, remodl_core_session_id text UNIQUE, platform_user_id uuid, platform_organization_id uuid, platform_application_id uuid, remodl_core_chat_flow_id uuid, timestamps, status). This ensures foundational tables for platform context exist for development and testing Remodl Core's new ownership features.",
      "status": "進行中",
      "dependencies": [],
      "createdAt": "2025-05-20T14:53:48.036Z",
      "updatedAt": "2025-05-20T15:16:47.047Z",
      "relatedFiles": [
        {
          "path": "packages/server/src/database/migrations/postgres/",
          "type": "CREATE",
          "description": "Directory for new bootstrap migration file."
        }
      ],
      "implementationGuide": "1. Confirm branch name `feature/platform-data-ownership-fields` and base branch (default to `remodel-v2-base`) with the user. 2. Upon confirmation, use `run_terminal_cmd` to execute `git checkout [base_branch]`, then `git branch feature/platform-data-ownership-fields`, then `git checkout feature/platform-data-ownership-fields`. 3. Use `run_terminal_cmd` to generate a new empty migration file named starting with `0000000000000-EnsurePlatformPrerequisites` (e.g., `pnpm --filter flowise typeorm:migration-generate src/database/migrations/postgres/0000000000000-EnsurePlatformPrerequisites`). 4. Use `read_file` to get the content of the new migration. 5. Use `edit_file` to populate the `up()` method of this migration file with the correct `CREATE TABLE IF NOT EXISTS` SQL statements for `public.applications`, `public.organizations`, `public.user_profiles` (including `user_auth_id uuid UNIQUE NOT NULL`), and `public.user_sessions` (with all specified minimal columns like `remodl_core_session_id`, `platform_user_id`, `platform_organization_id`, `platform_application_id`, `remodl_core_chat_flow_id`, and relevant timestamps/status). Ensure the `down()` method is empty or contains only commented-out, cautious `DROP TABLE` statements. 6. Use `run_terminal_cmd` to `git add` the new migration file. 7. Use `run_terminal_cmd` to `git commit -m \"feat: Add bootstrap migration for platform prerequisite tables (applications, organizations, user_profiles, user_sessions)\"`.",
      "verificationCriteria": "New git branch created. Bootstrap migration file created, populated with `CREATE TABLE IF NOT EXISTS` for four platform placeholder tables, and committed."
    },
    {
      "id": "e7761dac-4b1c-4515-8401-3b8adfa7a8c3",
      "name": "P2.2: Core Entity Modifications for Ownership",
      "description": "Modify all 10 specified Remodl Core TypeORM entity files to add new platform ownership columns (`applicationId`, `organizationId`, `userId`) and update `ApiKey` entity as per `system-patterns.md` section 6.8.",
      "status": "待處理",
      "dependencies": [
        {
          "taskId": "f5386303-0bda-420c-9959-ed002324c7cc"
        }
      ],
      "createdAt": "2025-05-20T14:53:48.036Z",
      "updatedAt": "2025-05-20T14:53:48.036Z",
      "relatedFiles": [
        {
          "path": "packages/server/src/database/entities/ApiKey.ts",
          "type": "TO_MODIFY",
          "description": "Modify ApiKey entity."
        },
        {
          "path": "packages/server/src/database/entities/ChatFlow.ts",
          "type": "TO_MODIFY",
          "description": "Modify ChatFlow entity."
        },
        {
          "path": "packages/server/src/database/entities/DocumentStore.ts",
          "type": "TO_MODIFY",
          "description": "Modify DocumentStore entity."
        },
        {
          "path": "packages/server/src/database/entities/Credential.ts",
          "type": "TO_MODIFY",
          "description": "Modify Credential entity."
        },
        {
          "path": "packages/server/src/database/entities/Variable.ts",
          "type": "TO_MODIFY",
          "description": "Modify Variable entity."
        },
        {
          "path": "packages/server/src/database/entities/CustomTemplate.ts",
          "type": "TO_MODIFY",
          "description": "Modify CustomTemplate entity."
        },
        {
          "path": "packages/server/src/database/entities/ChatMessageFeedback.ts",
          "type": "TO_MODIFY",
          "description": "Modify ChatMessageFeedback entity."
        },
        {
          "path": "packages/server/src/database/entities/Tool.ts",
          "type": "TO_MODIFY",
          "description": "Modify Tool entity."
        },
        {
          "path": "packages/server/src/database/entities/UpsertHistory.ts",
          "type": "TO_MODIFY",
          "description": "Modify UpsertHistory entity."
        }
      ],
      "implementationGuide": "For each of the 10 entities (`ApiKey`, `ChatFlow`, `DocumentStore`, `Credential`, `Variable`, `CustomTemplate`, `ChatMessageFeedback`, `Tool`, `UpsertHistory` in `packages/server/src/database/entities/`): 1. Read entity file. 2. Edit to add `@Column` decorators for `applicationId`, `organizationId`, `userId` with correct types/nullability per `system-patterns.md` 6.8. 3. For `ApiKey.ts`, also change `id` to `@PrimaryGeneratedColumn(\"uuid\")` and add `@CreateDateColumn() createdDate: Date;`. 4. Commit all entity changes.",
      "verificationCriteria": "All 10 entity files updated with correct ownership columns, types, nullability, and `ApiKey` specific changes, then committed."
    },
    {
      "id": "57ffefd7-2f8e-4769-975d-b12489a9b675",
      "name": "P2.3: Main Ownership Migration - Generation & Refinement",
      "description": "Generate the main TypeORM migration for all entity changes. Critically review and manually refine the generated SQL to correctly handle adding `NOT NULL` columns with defaults to existing tables in the \"Sam\" database.",
      "status": "待處理",
      "dependencies": [
        {
          "taskId": "e7761dac-4b1c-4515-8401-3b8adfa7a8c3"
        }
      ],
      "createdAt": "2025-05-20T14:53:48.036Z",
      "updatedAt": "2025-05-20T14:53:48.036Z",
      "relatedFiles": [
        {
          "path": "packages/server/src/database/migrations/postgres/",
          "type": "CREATE",
          "description": "Directory for new ownership migration file."
        }
      ],
      "implementationGuide": "1. Generate main ownership migration using TypeORM CLI (e.g., `AddPlatformOwnershipFields`). 2. Read the new migration file. 3. Meticulously review SQL. 4. Edit the `up()` method: for each new `NOT NULL` column on existing tables, ensure a 3-step SQL process (ADD NULLable, UPDATE with default, ALTER to NOT NULL). Verify `ApiKey.id` and `createdDate` changes. Ensure `down()` method is correct. 5. Commit refined migration.",
      "verificationCriteria": "Main ownership migration file created and SQL refined for safe application to existing tables with data. Changes committed."
    },
    {
      "id": "c5f7c218-a7ee-42e3-a7a2-d46525f5b26e",
      "name": "P2.4: Migration Execution & Validation (User-Assisted)",
      "description": "Guide the user to run all TypeORM migrations against the \"Sam\" Supabase project and validate the schema changes.",
      "status": "待處理",
      "dependencies": [
        {
          "taskId": "57ffefd7-2f8e-4769-975d-b12489a9b675"
        }
      ],
      "createdAt": "2025-05-20T14:53:48.036Z",
      "updatedAt": "2025-05-20T14:53:48.036Z",
      "relatedFiles": [
        {
          "path": "packages/server/.env",
          "type": "REFERENCE",
          "description": "Reference for DB connection."
        }
      ],
      "implementationGuide": "1. User confirms .env points to \"Sam\" DB. 2. Instruct user to run all migrations (e.g., `pnpm --filter flowise typeorm:migration:run`). 3. User monitors console. 4. Use `mcp_supabase-db_list_tables` for \"Sam\" project. 5. Guide user schema validation: check placeholder tables, new columns in 9 Remodl Core tables, `ApiKey` structure updates. 6. Await user confirmation.",
      "verificationCriteria": "User confirms successful migration execution on \"Sam\" DB. Schema changes (new columns, ApiKey structure, placeholder tables) are verified via `list_tables` and user inspection."
    },
    {
      "id": "fc0d1c97-25da-4b62-be7c-8f6328af0d01",
      "name": "P2.5: Documentation - Record Phase 2 Outcome",
      "description": "Document the outcome of Phase 2 (Implementation of API Key & Data Ownership Migrations) in the Memory Bank.",
      "status": "待處理",
      "dependencies": [
        {
          "taskId": "c5f7c218-a7ee-42e3-a7a2-d46525f5b26e"
        }
      ],
      "createdAt": "2025-05-20T14:53:48.036Z",
      "updatedAt": "2025-05-20T14:53:48.036Z",
      "relatedFiles": [
        {
          "path": "memory-bank/progress.md",
          "type": "TO_MODIFY",
          "description": "Log Phase 2 outcome."
        },
        {
          "path": "memory-bank/active-context.md",
          "type": "TO_MODIFY",
          "description": "Update current status and next steps."
        }
      ],
      "implementationGuide": "1. Based on P2.4 outcome: If successful, log success in `progress.md` & update `active-context.md` for Phase 3. If unsuccessful, log issues & note Phase 2 needs debugging. 2. Use Memory Bank tools for updates.",
      "verificationCriteria": "Memory Bank (`progress.md`, `active-context.md`) accurately reflects Phase 2 outcome."
    }
  ]
}