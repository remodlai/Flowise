openapi: 3.1.0
info:
  title: Node Custom Functions Schemas
  version: '1.0'
components:
  schemas:
    ExecuteCustomFunctionRequestBody:
      type: object
      description: "Request body to execute a custom JavaScript function."
      properties:
        javascriptFunction:
          type: string
          description: "The JavaScript code of the function to execute. Input variables can be referenced as $[variableName] within the code."
          example: "return $[input1] + $[input2];"
      required:
        - javascriptFunction
      additionalProperties: true
      example:
        javascriptFunction: "const location = $[city] + ', ' + $[country]; return { text: location };"
        city: "London"
        country: "UK"

    ExecuteCustomFunctionResponse:
      description: "The result of the executed custom function. This can be a string, a number, a boolean, an array, or a structured JSON object."
      oneOf:
        - type: string
        - type: number
        - type: boolean
        - type: array
          items: 
            type: object
            additionalProperties: true
        - type: object
          additionalProperties: true
      example: {
        "result": 35,
        "message": "Calculation completed successfully"
      }
      # To represent this flexibility, we can allow any type. 
      # For stricter typing, oneOf could list common primitives and a generic object/array.
      # Example: 
      # oneOf:
      #   - type: string
      #   - type: number
      #   - type: boolean
      #   - type: array
      #     items: {}
      #   - type: object
      #     additionalProperties: true
      # For now, representing as potentially any type by not specifying a strict type or using additionalProperties only for object.
      # A more generic way in OpenAPI for "any" is to omit type, or use a schema with no properties and additionalProperties: true, 
      # or use anyOf with all primitive types and generic object/array.
      # Let's use a flexible object as it's often structured data or string.
      # To truly allow *any* primitive directly as well, you might need a more complex anyOf or vendor extension approach.
      # Most common will be string or object. 