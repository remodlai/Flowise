openapi: 3.1.0
info:
  title: Document Store Schemas
  version: '1.0'
components:
  schemas:
    DocumentStoreStatusEnum:
      type: string
      enum: [EMPTY_SYNC, SYNC, SYNCING, STALE, NEW, UPSERTING, UPSERTED]
      description: "The synchronization or processing status of the document store or its components. Note: EMPTY_SYNC corresponds to an empty store that is considered in sync."

    IDocumentStoreLoaderFileSchema:
      type: object
      properties:
        id: 
          type: string 
          description: "Internal ID of the file record."
        name: 
          type: string 
          description: "Original name of the file."
        mimePrefix: 
          type: string 
          description: "MIME type of the file, e.g., 'application/pdf'."
        size: 
          type: integer 
          description: "Size of the file in bytes."
        status: 
          $ref: '#/components/schemas/DocumentStoreStatusEnum'
          description: "Processing status of this file."
        uploaded: 
          type: string 
          format: date-time 
          description: "Timestamp of when the file was uploaded/associated."
      required: [id, name, mimePrefix, size, status, uploaded]

    IDocumentStoreLoaderSchema:
      type: object
      properties:
        id: 
          type: string
          nullable: true
          description: "Instance ID of this specific loader configuration within the document store's 'loaders' array."
        loaderId:
          type: string
          nullable: true
          description: "Component name of the loader (e.g., 'pdfFile', 'cheerioWebScraper')."
        loaderName:
          type: string
          nullable: true
          description: "User-defined or default display name for this loader instance."
        loaderConfig:
          type: object
          additionalProperties: true
          description: "Configuration parameters specific to the loader defined by 'loaderId'. Structure is dynamic. Stored as JSON string in DB, parsed to object in response."
          example: {"filePath": "uploads/somefile.pdf"}
        splitterId:
          type: string
          nullable: true
          description: "Component name of the text splitter associated with this loader, if any."
        splitterName:
          type: string
          nullable: true
          description: "Display name of the associated text splitter."
        splitterConfig:
          type: object
          additionalProperties: true
          description: "Configuration parameters for the splitter. Structure is dynamic. Stored as JSON string in DB, parsed to object in response."
          nullable: true
        totalChunks:
          type: integer
          nullable: true
          description: "Total number of chunks produced by this loader/splitter combination."
        totalChars:
          type: integer
          nullable: true
          description: "Total number of characters processed by this loader/splitter."
        status:
          $ref: '#/components/schemas/DocumentStoreStatusEnum'
          nullable: true
          description: "Processing status of this loader instance."
        storeId: 
          type: string
          format: uuid
          nullable: true 
          description: "ID of the parent Document Store (contextual, may not be part of the direct loader object if nested)."
        files:
          type: array
          items:
            $ref: '#/components/schemas/IDocumentStoreLoaderFileSchema'
          nullable: true
          description: "List of files associated with this loader instance."
        source:
          type: string
          nullable: true
          description: "Derived source string for the loader (e.g., file name, URL)."
        credential:
          type: string
          format: uuid 
          nullable: true
          description: "ID of the credential used by this loader, if any."

    DocumentStoreWhereUsedSchema:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: "ID of the ChatFlow using this document store."
        name:
          type: string
          description: "Name of the ChatFlow using this document store."
      required: [id, name]

    DocumentStoreDTO:
      type: object
      properties:
        id: 
          type: string
          format: uuid
        name: 
          type: string
        description: 
          type: string
          nullable: true
        status: 
          $ref: '#/components/schemas/DocumentStoreStatusEnum'
        totalChars: 
          type: integer
          description: "Calculated sum of characters from all loaders."
        totalChunks: 
          type: integer
          description: "Calculated sum of chunks from all loaders."
        whereUsed:
          type: array
          items:
            $ref: '#/components/schemas/DocumentStoreWhereUsedSchema'
          description: "List of chatflows using this document store (ID and name)."
        vectorStoreConfig:
          type: object
          additionalProperties: true
          nullable: true
          description: "Parsed JSON object of the vector store configuration. Structure is dynamic."
        embeddingConfig:
          type: object
          additionalProperties: true
          nullable: true
          description: "Parsed JSON object of the embedding configuration. Structure is dynamic."
        recordManagerConfig:
          type: object
          additionalProperties: true
          nullable: true
          description: "Parsed JSON object of the record manager configuration. Structure is dynamic."
        loaders:
          type: array
          items:
            $ref: '#/components/schemas/IDocumentStoreLoaderSchema'
          description: "Array of loader configurations within this document store. Each loader object includes a 'source' field derived by the DTO."
        createdDate: 
          type: string
          format: date-time
        updatedDate: 
          type: string
          format: date-time
        # Following fields exist in the DTO class but are not populated by fromEntity
        files:
          type: array
          items:
            $ref: '#/components/schemas/IDocumentStoreLoaderFileSchema'
          nullable: true
          description: "Not actively populated by fromEntity method."
        chunkOverlap:
          type: integer
          nullable: true
          description: "Not actively populated by fromEntity method."
        splitter:
          type: string
          nullable: true
          description: "Not actively populated by fromEntity method."
        chunkSize:
          type: integer
          nullable: true
          description: "Not actively populated by fromEntity method."
      required: [id, name, status, totalChars, totalChunks, whereUsed, loaders, createdDate, updatedDate]

    DocumentStoreLoaderFullConfigResponse:
      type: object
      description: "Aggregated configurations for a specific loader within a document store."
      properties:
        loaderId:
          type: string
          description: "The component name of the loader (e.g., 'pdfFile', 'cheerioWebScraper')."
        loaderName:
          type: string
          description: "The user-defined or default display name of the loader instance."
        loaderConfig: 
          type: object
          additionalProperties: true 
          description: "Parsed JSON object of the loader's specific configuration parameters. Structure is dynamic based on the loaderId."
          example: {"url": "http://example.com", "limit": 3}
        splitterId: 
          type: string
          nullable: true
          description: "The component name of the splitter associated with this loader, if any."
        splitterName:
          type: string
          nullable: true
          description: "The display name of the splitter, if any."
        splitterConfig: 
          type: object
          additionalProperties: true 
          nullable: true
          description: "Parsed JSON object of the splitter's configuration parameters (if any). Structure is dynamic."
          example: {"chunkSize": 500, "chunkOverlap": 50}
        embeddingConfig: 
          type: object
          additionalProperties: true 
          nullable: true
          description: "Parsed JSON object of the embedding configuration from the parent Document Store. Structure is dynamic."
        vectorStoreConfig: 
          type: object
          additionalProperties: true 
          nullable: true
          description: "Parsed JSON object of the vector store configuration from the parent Document Store. Structure is dynamic."
        recordManagerConfig: 
          type: object
          additionalProperties: true 
          nullable: true
          description: "Parsed JSON object of the record manager configuration from the parent Document Store. Structure is dynamic."
      required:
        - loaderId
        - loaderName
        - loaderConfig

    INodeParamOptionSchema:
      type: object
      properties:
        label: { type: string }
        name: { type: string }
        description: { type: string, nullable: true }
      required: [label, name]

    INodeParamSchema:
      type: object
      properties:
        label: { type: string }
        name: { type: string }
        type: { type: string, description: "e.g., string, number, boolean, options, file, json, credential, asyncOptions" }
        description: { type: string, nullable: true }
        default: { type: string, nullable: true, description: "Can be of any type, represented as string here for flexibility." }
        options:
          type: array
          items:
            $ref: '#/components/schemas/INodeParamOptionSchema'
          nullable: true
        fileType: { type: string, nullable: true, description: "e.g., .pdf,.txt,.json" }
      required: [label, name, type]

    DocumentLoaderComponentDefinition:
      type: object
      description: "Definition of an available document loader component."
      properties:
        label: { type: string, description: "Display name of the loader." }
        name: { type: string, description: "Internal unique name/ID of the loader component." }
        version: { type: integer, default: 1, description: "Version of the component." }
        description: { type: string, nullable: true }
        type: { type: string, default: "DocumentLoader", description: "Component type, usually 'DocumentLoader'." }
        icon: { type: string, nullable: true, description: "Base64 encoded icon data URI or path." }
        category: { type: string, description: "Category, e.g., 'Document Loaders'." }
        baseClasses: 
          type: array 
          items: { type: string }
          description: "Base classes this component inherits from."
        inputs: 
          type: array
          items:
            $ref: '#/components/schemas/INodeParamSchema'
          description: "Input parameters required by the loader."
      required: [label, name, version, type, category, baseClasses]

    DocumentStoreFileChunk:
      type: object
      description: "Represents a specific chunk of a document file within a document store."
      properties:
        id: { type: string, format: uuid }
        chunkNo: { type: integer, description: "Sequential number of the chunk within its document." }
        docId: { type: string, format: uuid, description: "ID of the document (loader file record) this chunk belongs to." }
        storeId: { type: string, format: uuid, description: "ID of the parent document store." }
        pageContent: { type: string, description: "The textual content of this chunk." }
        metadata: { type: string, description: "Stringified JSON metadata associated with this chunk." }
      required: [id, chunkNo, docId, storeId, pageContent]
      
    DocumentStoreFileChunkPagedResponse:
      type: object
      description: "Paginated response for document store file chunks."
      properties:
        chunks:
          type: array
          items: { $ref: '#/components/schemas/DocumentStoreFileChunk' }
        count: { type: integer, description: "Total number of chunks for the given fileId." }
        characters: { type: integer, description: "Total number of characters for the given fileId." }
        file: 
          $ref: '#/components/schemas/IDocumentStoreLoaderSchema'
          nullable: true
          description: "Details of the loader associated with these chunks."
        currentPage: { type: integer, description: "The current page number of the chunks returned." }
        storeName: { type: string, description: "Name of the parent document store." }
        description: { type: string, nullable: true, description: "Description of the parent document store." }
        docId: { type: string, format: uuid, description: "ID of the document (loader file record) these chunks belong to." }
      required: [chunks, count, characters, currentPage, storeName, docId]

    CreateDocumentStoreRequestBody:
      type: object
      description: "Request body for creating a new document store."
      properties:
        name: { type: string, description: "Name for the new document store." }
        description: { type: string, nullable: true, description: "Optional description for the document store." }
      required: [name]

    UpdateDocumentStoreRequestBody:
      type: object
      description: "Request body for updating a document store's name or description."
      properties:
        name: { type: string, nullable: true, description: "New name for the document store." }
        description: { type: string, nullable: true, description: "New description for the document store." }
        status: 
          $ref: '#/components/schemas/DocumentStoreStatusEnum'
          nullable: true
        loaders: 
          type: string
          nullable: true
          description: "JSON string of loader configurations"
        vectorStoreConfig: 
          type: string
          nullable: true
          description: "JSON string of vector store configuration"
        embeddingConfig: 
          type: string
          nullable: true
          description: "JSON string of embedding configuration"
        recordManagerConfig: 
          type: string
          nullable: true
          description: "JSON string of record manager configuration"