# Path with ID in URL
/predictions/{id}:
  post:
    operationId: createPrediction
    summary: Execute Chatflow/Agentflow
    description: >-
      Executes a specific chatflow or agentflow identified by its ID.
      Accepts user input, overrides, history, and optional files.
      Returns a JSON response or streams Server-Sent Events (SSE).
      This is the primary endpoint for interacting with deployed flows.
      Note: Requests are subject to rate limiting via the rate limiter middleware.
    tags:
      - Predictions
    parameters:
      - name: id
        in: path
        required: true
        description: >-
          The unique identifier of the chatflow/agentflow to execute.
          No specific format is enforced, but typically uses UUID format.
        schema:
          type: string
    requestBody:
      description: Request payload containing user input, overrides, and options.
      required: true
      content:
        application/json:
          schema:
            $ref: '../../schemas/modules/PredictionsSchemas.yaml#/components/schemas/PredictionsRequestBody'
        multipart/form-data:
          schema:
            allOf:
              - $ref: '../../schemas/modules/PredictionsSchemas.yaml#/components/schemas/PredictionsRequestBody'
              - type: object
                properties:
                  # Specific file fields (e.g., pdfFile, imageFile, txtFile) are added dynamically
                  # based on uploaded file types, mapping to overrideConfig internally.
                  # Define common potential types or use additionalProperties.
                  question: {}
                  overrideConfig: {}
                  history: {}
                  uploads: {}
                  streaming: {}
                  chatId: {}
                  leadEmail: {}
                  vars: {}
                  # Example potential file field:
                  fileInputFieldName: 
                    type: string
                    format: binary
                    description: "Field name depends on file type (e.g., 'imageFile', 'pdfFile'). Multiple files can be uploaded."
          encoding:
            history:
              contentType: application/json
            overrideConfig:
              contentType: application/json
            uploads:
              contentType: application/json
            vars:
              contentType: application/json
            # Add encodings for potential file fields if needed, though often handled by server

    responses:
      '200':
        description: >-
          Successful execution. Response format depends on the 'streaming' parameter
          and flow configuration.
        content:
          application/json:
            schema:
              $ref: '../../schemas/modules/PredictionsSchemas.yaml#/components/schemas/PredictionsSuccessResponse'
            example: # Example for non-streaming response
              text: "Hello! How can I help you today?"
              chatId: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
              chatMessageId: "b2c3d4e5-f6a7-8901-2345-67890abcdef0"
              question: "Hi"
              sessionId: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
              isStreamValid: false
          text/event-stream:
            schema:
              type: string
              format: binary
            description: |
              Server-Sent Events (SSE) stream containing execution progress and results.
              Each event has the format: `message\ndata:{"event":"EVENT_TYPE","data":EVENT_DATA}\n\n`
              
              The stream may include various event types depending on the chatflow:
              
              **Flow Control Events:**
              - `start`: Signals the beginning of the stream
              - `agentFlowEvent`: Overall process status (INPROGRESS, FINISHED, ERROR, etc.)
              - `end`: Stream termination marker "[DONE]"
              - `abort`: Signals aborted execution
              - `error`: Error information if execution fails
              
              **Node Execution Events:**
              - `nextAgentFlow`: Node processing status updates
              - `agentFlowExecutedData`: Detailed execution data from completed nodes
              
              **Content Events:**
              - `token`: Individual tokens from LLM (for real-time text generation)
              - `sourceDocuments`: RAG source references from retrieval nodes
              - `artifacts`: Generated artifacts like images or files
              - `fileAnnotations`: File annotations, especially from OpenAI Assistants
              
              **Tool Usage Events:**
              - `calledTools`: Information about tools called during execution
              - `usedTools`: Similar to calledTools but with different formatting
              - `tool`: Detailed tool execution information
              - `action`: Action information, especially from agent tools
              
              **Agent Events:**
              - `agentReasoning`: Agent reasoning/thought process
              - `nextAgent`: Information about the next agent in multi-agent flows
              
              **Metadata Events:**
              - `metadata`: Session information and context (sent at completion)
              - `usageMetadata`: Token usage statistics
            examples:
              agentFlowEvent:
                value: 'message\ndata:{"event":"agentFlowEvent","data":"INPROGRESS"}\n\n'
                summary: "Flow execution status"
              nextAgentFlow:
                value: 'message\ndata:{"event":"nextAgentFlow","data":{"nodeId":"node_12345","nodeLabel":"LLM Node","status":"INPROGRESS"}}\n\n'
                summary: "Node execution status"
              token:
                value: 'message\ndata:{"event":"token","data":"Hello world"}\n\n'
                summary: "Individual token from LLM"
              sourceDocuments:
                value: 'message\ndata:{"event":"sourceDocuments","data":[{"pageContent":"Document text","metadata":{"source":"file.pdf","page":5}}]}\n\n'
                summary: "RAG source documents"
              metadata:
                value: 'message\ndata:{"event":"metadata","data":{"chatId":"client-id","chatMessageId":"msg-789","question":"user question"}}\n\n'
                summary: "Session metadata"
              end:
                value: 'message\ndata:{"event":"end","data":"[DONE]"}\n\n'
                summary: "End of stream marker"
      '400':
        description: Bad Request (e.g., missing required fields, invalid input).
        content:
          application/json:
            schema:
              $ref: '../../schemas/shared/CommonSchemas.yaml#/components/schemas/ErrorResponse'
      '403':
        description: Forbidden (e.g., request origin not allowed based on chatbotConfig.allowedOrigins).
        content:
          application/json:
            schema:
              $ref: '../../schemas/shared/CommonSchemas.yaml#/components/schemas/ErrorResponse'
      '404':
        description: Not Found (e.g., chatflow ID does not exist).
        content:
          application/json:
            schema:
              $ref: '../../schemas/shared/CommonSchemas.yaml#/components/schemas/ErrorResponse'
      '429':
        description: Too Many Requests (Rate limit exceeded via rate limiter middleware).
        content:
          application/json:
            schema:
              $ref: '../../schemas/shared/CommonSchemas.yaml#/components/schemas/ErrorResponse'
      '500':
        description: Internal Server Error.
        content:
          application/json:
            schema:
              $ref: '../../schemas/shared/CommonSchemas.yaml#/components/schemas/ErrorResponse'

# Alternative path with ID in body
/predictions:
  post:
    operationId: createPredictionWithBodyId
    summary: Execute Chatflow/Agentflow (ID in Body)
    description: >-
      Alternative endpoint that executes a specific chatflow or agentflow with the ID provided in the request body
      instead of the URL path. Functions identically to the /predictions/{id} endpoint.
      Subject to rate limiting via the rate limiter middleware.
    tags:
      - Predictions
    requestBody:
      description: Request payload containing user input, overrides, and options, including the chatflow/agentflow ID.
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '../../schemas/modules/PredictionsSchemas.yaml#/components/schemas/PredictionsRequestBody'
              - type: object
                properties:
                  id:
                    type: string
                    description: The unique identifier of the chatflow/agentflow to execute.
                required:
                  - id
        multipart/form-data:
          schema:
            allOf:
              - $ref: '../../schemas/modules/PredictionsSchemas.yaml#/components/schemas/PredictionsRequestBody'
              - type: object
                properties:
                  id:
                    type: string
                    description: The unique identifier of the chatflow/agentflow to execute.
                  # Other field definitions omitted for brevity (see /predictions/{id} endpoint)
                required:
                  - id
    responses:
      # Response definitions omitted for brevity (identical to /predictions/{id} endpoint)
      '200':
        $ref: '#/predictions/{id}/post/responses/200'
      '400':
        $ref: '#/predictions/{id}/post/responses/400'
      '403':
        $ref: '#/predictions/{id}/post/responses/403'
      '404':
        $ref: '#/predictions/{id}/post/responses/404'
      '429':
        $ref: '#/predictions/{id}/post/responses/429'
      '500':
        $ref: '#/predictions/{id}/post/responses/500'